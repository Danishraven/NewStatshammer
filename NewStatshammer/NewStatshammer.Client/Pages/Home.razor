@page "/"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<PageTitle>Home</PageTitle>

<div class="main-view">
    <h3>Fighters</h3>
    @if (firstRendering)
    {
        @foreach (Fighter fighter in fighters)
        {
            <div class="fighter">
                <div class="flex-container">
                    <div class="input-container name-input">
                        <label class="profile-lable" for="fname">Fighter Name</label>
                        <input class="profile-input" type="text" id="fname" name="fname" @bind="fighter.Name" @bind:after="SaveFighters" />
                    </div>
                    <div>
                        <button class="small-button" @onclick="() => CopyFighter(fighter)">
                            <Icon Name="IconName.Copy" />
                        </button>
                        <button class="small-button" @onclick="() => RemoveFighter(fighter.Id)">
                            <Icon Name="IconName.Trash3Fill" />
                        </button>
                    </div>
                </div>
                @foreach (Profile profile in fighter.Profiles)
                {
                    <div class="flex-container">
                        <div>
                            <label class="switch">
                                <input type="checkbox" @bind="profile.Active" @onclick="() => ChangeSwitch(fighter, profile)" @bind:after="SaveFighters">
                                <span class="slider round"></span>
                            </label>
                        </div>
                        <div class="input-container">
                            <label class="profile-lable" for="prange">Range</label>
                            <input class="profile-input" type="text" id="prange" name="prange" @bind="profile.Range" @bind:after="SaveFighters" />
                        </div>
                        <div class="input-container">
                            <label class="profile-lable" for="patk">Attacks</label>
                            @if (profile.Attacks > 6)
                            {
                                <label style="color: red; font-size: 8px; left: 40px; top: 5px; position: absolute">Preformance suffers if the number of attacks is higher than 6</label>
                            }
                            <input class="profile-input" type="number" id="patk" name="patk" @bind="profile.Attacks" @bind:after="SaveFighters" />
                        </div>
                        <div class="input-container">
                            <label class="profile-lable" for="pstr">Strength</label>
                            <input class="profile-input" type="number" id="pstr" name="pstr" @bind="profile.Strength" @bind:after="SaveFighters" />
                        </div>
                        <div class="input-container">
                            <label class="profile-lable" for="phit">Hit</label>
                            <input class="profile-input" type="number" id="phit" name="phit" @bind="profile.Damage.Hit" @bind:after="SaveFighters" />
                        </div>
                        <div class="input-container">
                            <label class="profile-lable" for="pcrit">Crit</label>
                            <input class="profile-input" type="number" id="pcrit" name="pcrit" @bind="profile.Damage.Crit" @bind:after="SaveFighters" />
                        </div>
                        <button class="small-button" @onclick="() => RemoveProfile(fighter, profile.Id)" disabled="@(fighter.Profiles.Count < 2)">
                            <Icon Name="IconName.Trash3Fill" />
                        </button>

                    </div>
                }
                <div class="add-profile-container">
                    <button class="add-profile" @onclick="() => AddProfile(fighter)">Add Profile</button>
                </div>
            </div>

        }
        <div class="add-fighter-container">
            <button class="add-fighter" @onclick="() => AddFighter()">Add Fighter</button>
        </div>
        @foreach (string s in messages)
        {
            @s
        }
    }
    else
    {
        <div>
            <h1>
                Rendering
            </h1>
        </div>
    }
</div>
<style>
    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
    .flex-container{
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .input-container{
        position: relative;
        height: 45px;
        width: 15%;
        margin: 5px;
        border-radius: 5px;
    }

    .profile-input{
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        font-size: 20px;
        padding-top: 20px;
        background-color: rgba(255, 255, 255, 0.09);
        color: white;
    }
    .profile-lable{
        z-index: 2;
        position: absolute;
        font-size: 10px;
        left: 5px;
        top: 5px;
    }

    .fighter{
        background-color: #333;
        padding: 25px;
        margin-top: 20px;
        border-radius: 5px;
    }

    .small-button{
        height: 32px;
        width: 32px;
        background: none;
        color: white;
        border: 0;
        position: relative;
        right: 0
    }

    .small-button:disabled{
        height: 32px;
        width: 32px;
        background: none;
        color: black;
        border: 0;
        position: relative;
        right: 0
    }
    .name-input{
        width: calc(100% - 96px);
    }

    .main-view{
        padding: 10px
    }

    .add-profile-container {
    }

    .add-profile {
        width: 100%;
        margin-top: 10px;
        border-radius: 5px;
        background-color: orange;
    }

    .add-fighter-container{
        
    }

    .add-fighter{
        width: 100%;
        margin-top: 10px;
        border-radius: 5px;
        background-color: #f44336;
    }
</style>
@code{
    List<Fighter> fighters = new();
    List<string> messages = new();
    bool firstRendering = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            List<Fighter>? storage = null;
            try
            {
                storage = await localStorage.GetItemAsync<List<Fighter>>("fighters");
            }
            catch (Exception e)
            {
                messages.Add(e.Message.ToString());
            }
            if (storage != null)
            {
                fighters = storage;
            }
            else
            {
                fighters.Add(new Fighter());
            }
            firstRendering = true;
            StateHasChanged();
        }
    }

    public void AddFighter()
    {
        fighters.Add(new Fighter());
        SaveFighters();
    }

    public void CopyFighter(Fighter fighter)
    {
        fighters.Add(fighter.CopyFighter());
        SaveFighters();
    }

    public void RemoveFighter(Guid id)
    {
        Fighter? fighter = fighters.Find(p => p.Id == id);
        if (fighter != null) fighters.Remove(fighter);
        SaveFighters();
    }

    public void AddProfile(Fighter fighter)
    {
        fighter.AddProfile();
        SaveFighters();
    }

    public void RemoveProfile(Fighter fighter, Guid id)
    {
        Profile? profile = fighter.Profiles.Find(p => p.Id == id);
        if (profile is not null) fighter.Profiles.Remove(profile);
        SaveFighters();
    }

    public void SaveFighters()
    {
        localStorage.SetItemAsync("fighters", fighters);
    }

    public void ChangeSwitch(Fighter fighter, Profile profile)
    {
        foreach (Profile p in fighter.Profiles)
        {
            if (p != profile)
            {
                p.Active = false;
            }
        }
    }
}