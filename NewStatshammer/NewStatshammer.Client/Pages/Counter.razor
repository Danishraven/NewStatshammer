@page "/counter"
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


@if (firstRendering)
{
    @foreach (Fighter fighter in fighters)
    {
        <h3>
            @fighter.Name
            @fighter.Id
        </h3>
        @foreach (Profile profile in fighter.Profiles)
        {
            <h4>
                @profile.Id
            </h4>
        }
    }
    foreach (KeyValuePair<Fighter, Dictionary<double, Dictionary<double, double>>> kvp1 in dict)
    {
        <div>
            @kvp1.Key.Name
            @foreach (KeyValuePair<double, Dictionary<double, double>> item in kvp1.Value)
            {
                double sum = 0;
                <div>
                    toughness: @item.Key
                    
                    @foreach (KeyValuePair<double, double> kvp3 in item.Value)
                    {
                        double fraction = Math.Round((kvp3.Value / simulations) * 100, 2);
                        sum += fraction;
                        double red = 255 - (255 * sum / 100);
                        double blue = 255 * sum / 100;
                        <div style="color:rgb(0,0,@red)">
                            damage @kvp3.Key : 
                            @kvp3.Value
                            @fraction
                        </div>
                    }
                </div>
            }
        </div>
    }
}
else
{
    <h1>Khorne renders</h1>
}

@code {
    List<Fighter> fighters = new();
    List<string> messages = new();
    bool firstRendering = false;
    double simulations = 1000000;
    int minimumToughness = 3;
    int maximumToughness = 7;
    Dictionary<Fighter, Dictionary<double, Dictionary<double, double>>> dict = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            List<Fighter>? storage = null;
            try
            {
                storage = await localStorage.GetItemAsync<List<Fighter>>("fighters");
            }
            catch (Exception e)
            {
                messages.Add(e.Message.ToString());
            }
            if (storage != null)
            {
                fighters = storage;
            }
            else
            {
                fighters.Add(new Fighter());
            }
            SimulateAttacks();
            firstRendering = true;
            StateHasChanged();
        }
    }

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    public void SimulateAttacks()
    {
        Random random = new();
        foreach (Fighter fighter in fighters)
        {
            foreach (Profile profile in fighter.Profiles)
            {
                if (profile.Active)
                {
                    Dictionary<double, Dictionary<double, double>> toughnessDamagePairs = new();
                    for (int toughness = minimumToughness; toughness <= maximumToughness; toughness++)
                    {
                        Dictionary<double, double> damages = new();
                        for (int i = 0; i < (profile.Damage.Crit * profile.Attacks)+1; i++)
                        {
                            damages.Add(i, 0);
                        }
                        int toHit = 4;
                        if (profile.Strength > toughness)
                        {
                            toHit = 3;
                        }
                        else if (profile.Strength < toughness)
                        {
                            toHit = 5;
                        }
                        for (int j = 0; j < simulations; j++)
                        {
                            double damage = 0;
                            for (int i = 0; i < profile.Attacks; i++)
                            {
                                int roll = random.Next(1, 7);
                                if (roll == 6)
                                {
                                    damage += profile.Damage.Crit;
                                }
                                else if (roll >= toHit)
                                {
                                    damage += profile.Damage.Hit;
                                }
                            }
                            damages[damage] += 1;
                        }
                        for (int i = 0; i < (profile.Damage.Crit * profile.Attacks) + 1; i++)
                        {
                            if (damages[i] == 0)
                            {
                                damages.Remove(i);
                            }
                        }
                        toughnessDamagePairs.Add(toughness, damages);
                    }
                    dict.Add(fighter, toughnessDamagePairs);
                }
            }
        }
    }
}
